VARIOUS DESIGN NOTES FOR CSTOOL

GENERAL NOTE:
The class interfaces in csTool are not that well defined. It is my opinion
that porting the entire program to python (using SciPy) would be preferable,
and as such I won't bother making significant changes in improving the 
class interfaces.

CSFRAMEBUFFER
Move random backprojection generator into csFrameBuffer?

Unit testing harness for sparse tracker:

This is to my mind one of the most important components in the system. I need to 
create a testing harness to get rid of bugs and demonstrate that this kind of system
is viable. 
The problem lies mainly in sizing the window. There are two options, one of which 
(precomputing the size from the segmentation operation) seems the winner for ease
of operation.

1) Try and scale the window as a factor of the remaining pixels.
This system has problems because we can't know for certain how many pixels are missing
 and so the window is likely to end up being to small. 

2) Scale the window based on knowing the correct zeroth moment.
This requires us to know the correct zeroth moment. In the FPGA, the easiest way to
do this is to have an accumulator in the segmentation pipeline that adds up the number
of segmented pixels as they exit the pipe. This value is then used for sizing the 
window. The sparse zeroth moment still needs to be computed from the sparse data 
in a seperate accumulator. 

Pre-Caching buffer:

This is one possible answer to the question 'where should the image data be read from disk?'. We could pre-read some proportion of the frames before processing, dor the processing on those frames, and then delete behind us the image data associated with the finished frame before performing the process again on some other subset of the remaining frame.

Reading frames from disk is the slowest operation in the image processing loop




RELATIONSHIP BETWEEN csImProc AND csSegmenter

imRegion is a property of csSegmenter, but perhaps it should be passed to csImProc.procFrame, which sets up the imRegion property in csImProc's csSegmenter object. This way the initialisation step is taken care of implicitly in the call.

On the other hand, in the context of a GUI driven operation, this means that each processing run requires there to be an imRegion matrix in the call. This could be avoided in 2 ways:

1) Explicitly decouple these functions, force a (seperate) init step each time. 
2) Have an 'imregion' option that specifies a new imRegion is to be passed in, otherwise use whatever is currently in csImProc.iSegmenter.imRegion.

1 gives better seperation of concerns. Both suffer from the problem of passing data down through a series of classes. 

CONSIDERAION FOR CONSOLE USE
Ideally, the classes should all be usable from the MATLAB prompt without requiring a 
GUI. This way, batch processing can be performed in a script without spending time
drawing any results. This means that the csFrameBrowser class should still be 
finished at some point, even though it isn't needed for the GUI version of csTool.




ADDITIONS:
SEGMENTATION:
- Tiered FPGA mode. This would give us a mode using doubles (classic histogram 
backprojection), a mode using binary projection, 2-bit projection, 3-bit projection, 
etc)

- Variable minimum window size. Sizes larger than 16 are probably not worth having,
but 0, 2, 4, 8, and 16 could be useful

HOW TO BUILD MULTI-TARGET TRACKING INTO CSTOOL?!?!?!?






INCLUDE FEATURE TO MEASURE PREDICTION PEFORMANCE






===============================================================================
TRAJECTORY
Need to add a panel that can compare several trajectories against each other (from 
different tracking algorithms). There should be some buffer that can hold an array of
co-ordinate pairs from seperate tracking instances (or perhaps they could be written 
to/read from disk) so that the tracking performance can be compared side-by-side.

In addition to this, the param browser needs to show the centroids and parameters 
properly, rather than just the backprojection image.

(Trajectory in main window should be plotted over the preview image, not the 
backprojection image)

Comparison use:
 - Get current trajectory
 - Store into buffer
 - Compare one buffer index with another (this plots both and highlights currently selected frame)

===============================================================================

Some more TODOs for csTool:
- Change the gui_plotParams() function to display the intermediate iterations properly when used in the csToolParamBrowser panel
- In the param browser, when the next/prev param buttons are pressed, the preview should be re-drawn with the currently highlighted parameter drawn more prominent than the others. The tracking window should also be shown. Add a checkbox for the 'show as sparse' option as well.

- Create trajectory buffer and trajectory browser. The trajectory browser needs at least 2 figure axes
	1) Show the trajectories themselves. This is just the squiggly line itself 
	superimposed on the backprojection image. They could have markers at each point 
	with the character '1', '2', ..etc to indicate which tracking run they belong to.
	2) An error window. This unrolls the stream into a straight line and plots the 
	pixel error at each frame (as a stem plot, for example). 


ROBERT COLLINS MEANSHIFT TARGET LOCALISATION
(Online Selection of Discriminative Tracking Features)

- In the csTracker class, this needs to be implemented both as is, and with a sparse/scaling vector (since the FPGA implementation will presumably contain a scaling buffer rather than a 1-bit buffer)


VECMANAGER
We may want to have a smarter naming system for categorising the sets of vectors that are related to a single image. 

EX: say that we have an image img.tif that we wish to create a backprojection image of. We might ordinarily choose to generate a vector file called bpimg.dat. However if we are creating a 16 column-wise vector streams for use in a testbench we want to rename the file bpmg-vec%03d.dat, where the integer type specifier is the vector number ranging from 1 < k < V.

We therefore might want to parse the name a second time, or add another section to the parser that can strip the .dat from the intial filename and replace it with -vec%03d.dat




MEAN SHIFT VECTOR
Add a routine to display the computed meanshift vector in the preview area (as a red line, for example)



IMAGE HISTOGRAM
Make a small utility to fully verify (ie: A/B comparison) the regional image histogram property. This SHOULD be true. We SHOULD be able to compute the histogram for basically any arbitrary geometric region, as long as we correctly normalise the histogram bins to account for the number of pixels in that region


HISTOGRAM WEIGHTS
In the FPGA, we can weight the histogram only the extent offered by the size of the data word (i.e: if we have a 2-bit pixel word, we have 3 weights + zero weight, and so on). The FPGA_MODE option for the csSegmenter object should have a property (and associated GUI entry) that allows us to set the weight parameter for computation. The values here should correspond to the number of weights possible, including zero (so 1, 4, 8, and so on). This means that the pixel values in the backprojection image need to be quantised to the selected bit depth.

% QUANTISATION STEP
bpimg = bpimg ./ (max(max(bpimg))); 	%range - [0 1]
bpimg = fix(bpimg .* T.BPIMG_BIT_DEPTH);


