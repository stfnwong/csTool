VARIOUS DESIGN NOTES FOR CSTOOL

Unit testing harness for sparse tracker:

This is to my mind one of the most important components in the system. I need to 
create a testing harness to get rid of bugs and demonstrate that this kind of system
is viable. 
The problem lies mainly in sizing the window. There are two options, one of which 
(precomputing the size from the segmentation operation) seems the winner for ease
of operation.

1) Try and scale the window as a factor of the remaining pixels.
This system has problems because we can't know for certain how many pixels are missing
 and so the window is likely to end up being to small. 

2) Scale the window based on knowing the correct zeroth moment.
This requires us to know the correct zeroth moment. In the FPGA, the easiest way to
do this is to have an accumulator in the segmentation pipeline that adds up the number
of segmented pixels as they exit the pipe. This value is then used for sizing the 
window. The sparse zeroth moment still needs to be computed from the sparse data 
in a seperate accumulator. 

Pre-Caching buffer:

This is one possible answer to the question 'where should the image data be read from disk?'. We could pre-read some proportion of the frames before processing, dor the processing on those frames, and then delete behind us the image data associated with the finished frame before performing the process again on some other subset of the remaining frame.

Reading frames from disk is the slowest operation in the image processing loop




RELATIONSHIP BETWEEN csImProc AND csSegmenter

imRegion is a property of csSegmenter, but perhaps it should be passed to csImProc.procFrame, which sets up the imRegion property in csImProc's csSegmenter object. This way the initialisation step is taken care of implicitly in the call.

On the other hand, in the context of a GUI driven operation, this means that each processing run requires there to be an imRegion matrix in the call. This could be avoided in 2 ways:

1) Explicitly decouple these functions, force a (seperate) init step each time. 
2) Have an 'imregion' option that specifies a new imRegion is to be passed in, otherwise use whatever is currently in csImProc.iSegmenter.imRegion.

1 gives better seperation of concerns. Both suffer from the problem of passing data down through a series of classes. 

CONSIDERAION FOR CONSOLE USE
Ideally, the classes should all be usable from the MATLAB prompt without requiring a 
GUI. This way, batch processing can be performed in a script without spending time
drawing any results. This means that the csFrameBrowser class should still be 
finished at some point, even though it isn't needed for the GUI version of csTool.




ADDITIONS:
SEGMENTATION:
- Tiered FPGA mode. This would give us a mode using doubles (classic histogram 
backprojection), a mode using binary projection, 2-bit projection, 3-bit projection, 
etc)

- Variable minimum window size. Sizes larger than 16 are probably not worth having,
but 0, 2, 4, 8, and 16 could be useful

HOW TO BUILD MULTI-TARGET TRACKING INTO CSTOOL?!?!?!?






INCLUDE FEATURE TO MEASURE PREDICTION PEFORMANCE
