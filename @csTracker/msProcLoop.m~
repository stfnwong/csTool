function status = msProcLoop(T, fh, trackWindow)
% SELMETHOD
% status = msProcLoop(T, fh, trackWindow)
%
% Perform specified tracking operation on the frame handle fh.
% csTracker.msProcLoop() performs the tracking method specified in T.method 
% on the frame contained in the frame handle fh.
%
% The value in T.FIXED_ITER determines the kind of tracking loop to use. If 
% T.FIXED_ITER is 1, the tracking will perform T.MAX_ITER loops for every 
% frame. This can be useful to see that there are no side effects to 
% overtracking in the FPGA. If T.FIXED_ITER is 0, the tracking will continue
% until eps is less than T.EPSILON in each dimension of eps (e.g: eps(1) <
% T>EPSILON && eps(2) < T.EPSILON)

% Stefan Wong 2013

	%Do a quick sanity check on trackWindow
	if(isempty(trackWindow))
		fprintf('ERROR: empty trackWindow in csTracker.msProcLoop()\n');
		status = -1;
		return;
	end

	%Allocate memory to store all intermediate results
	tVec     = zeros(2, T.MAX_ITER);
	fmoments = cell(1, T.MAX_ITER);	

	%NOTE: As of 2/3/13, all accumulator implementations in csTool operate on bpimg
	% data rather than bpvec data. The conversion for the frame is performed here
	bpimg = vec2bpimg(get(fh, 'bpVec'), get(fh, 'dims'));

	% ======== MEANSHIFT PROCESSING LOOP ======== %
	for n = 1:T.MAX_ITER
		switch T.method
			case T.MOMENT_WINACCUM	
				moments = winAccumImg(T, bpimg, trackWindow);	
			case T.MOMENT_IMGACCUM
				moments = imgAccum(T, bpimg);
			case T.KERNEL_DENSITY
				fprintf('Not yet implemented\n');
				status = -1;
				return;
			otherwise
				fprintf('Not yet implemented\n');
				status = -1;
				return;
		end
		%Store intermediate results
		fmoments{n} = moments;
		tVec(:,n)   = [moments(1) ; moments(2)];
		if(~T.FIXED_ITER && n > 1)
			%If we converge early, quit the loop
			cverge = abs(tVec(:,n) - tVec(:,n-1));
			if(cverge(1) > T.EPSILON && cverge(2) < T.EPSILON)
				if(T.verbose)
					fprintf('Converged on loop %d\n', n);
				end
				break;
			end
		end	
	end

	%Check that we did converge, and if not report
	%if(abs(tVec(:,n) - tVec(:,n-1)) > T.EPSILON * ones(2,1))
	cverge =  abs(tVec(:,n) - tVec(:,n-1));
	if(cverge(1) > T.EPSILON && cverge(2) > T.EPSILON)
		fprintf('WARNING: tVec failed to converge in %d iters\n', T.MAX_ITER);
	end

	%Compute new window parameters
	wparam = wparamComp(T, moments);
	%Check wparam
	dims = get(fh, 'dims');
	if(wparam(4) > dims(1))
		wparam(4) = dims(2);
		if(T.verbose)
			fprintf('%s clipped wparam(4) to %d\n', T.pStr, dims(2));
		end
	end
	if(wparam(4) < 1)
		wparam(4) = 1;
		if(T.verbose)
			fprintf('%s clipp
	%Write data out to frame handle
	set(fh, 'tVec', tVec);
	set(fh, 'winParams', wparam);
	set(fh, 'moments', fmoments);
	set(fh, 'nIters', n);

	status = 0;
	
end 	%msProcLoop()
